<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Node.js Design Patterns Blog</title>
  <subtitle>From the authors of Node.js Design Patterns, useful bits to enrich your Node.js knowledge</subtitle>
  <link href="https://www.nodejsdesignpatterns.com/blog/rss.xml" rel="self"/>
  <link href="https://www.nodejsdesignpatterns.com/blog"/>
  <updated>2021-01-24T18:35:00+00:00</updated>
  <id>https://www.nodejsdesignpatterns.com/blog</id>
  <author>
    <name>Luciano Mammino and Mario Casciaro</name>
    <email>authors@nodejsdesignpatterns.com</email>
  </author>
    
    <entry>
      <title>5 Ways to install Node.js</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js/"/>
      <updated>2020-12-24T18:30:00+00:00</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/5-ways-to-install-node-js/</id>
      <content type="html">&lt;p&gt;In this article, we will explore some of the most common ways to install Node.js in your development system. We will see how to install Node.js using the official installer for various platforms, how to use a Node.js version manager such as &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;nvm&lt;/code&gt; and, finally, we will also see how to compile and install Node.js from source. Along the way, we will try to disclose one or two tips to get you even more productive with Node.js!&lt;/p&gt;
&lt;p&gt;Let&#39;s get started!&lt;/p&gt;
&lt;h2 id=&quot;which-option-should-i-pick%3F&quot; class=&quot;title is-2&quot;&gt;Which option should I pick?&lt;/h2&gt;
&lt;p&gt;There are many different ways to install Node.js and every one of them comes with its own perks and drawbacks. In this article, we will try to explore the most common ones and by the end of it, you should have a good understanding of which ones should be more suitable for you.&lt;/p&gt;
&lt;h3 id=&quot;tldr%3B&quot; class=&quot;title is-3&quot;&gt;TLDR;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt; if you develop with Node.js frequently and you expect to be needing to switch Node.js version while moving from one project to another or to debug potential compatibility issues in your project or library.&lt;/li&gt;
&lt;li&gt;Use the system package manager like &lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt; or &lt;code&gt;winget&lt;/code&gt; if you tend to install all your software this way and if you don&#39;t expect to be needing to switch or upgrade Node.js version too often.&lt;/li&gt;
&lt;li&gt;Install Node.js from source if you are an advanced user and if you want to contribute back to Node.js itself.&lt;/li&gt;
&lt;li&gt;Use the official Node.js installer if you don&#39;t fall in any of the previous options...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;what-other-people-seem-to-like&quot; class=&quot;title is-3&quot;&gt;What other people seem to like&lt;/h3&gt;
&lt;p&gt;Before writing this article, I was actually curious to find out what are the options that most folks in my network prefer. For this reason, I run a &lt;a href=&quot;https://twitter.com/loige/status/1340999569807712257&quot;&gt;poll on Twitter&lt;/a&gt;. In this poll I asked how you prefer to install Node.js and provided 4 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official Installer&lt;/li&gt;
&lt;li&gt;Version manager (&lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Package Manager (&lt;code&gt;apt&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, etc.)&lt;/li&gt;
&lt;li&gt;From source&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The results are quite interesting:&lt;/p&gt;
&lt;a href=&quot;https://twitter.com/loige/status/1340999569807712257&quot; rel=&quot;nofollow noreferrer&quot;&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 593px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-64.png 64w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-128.png 128w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-256.png 256w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-512.png 512w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-633.png 633w&quot; sizes=&quot;(max-width: 593px) 100vw, 593px&quot;&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-64.webp 64w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-128.webp 128w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-256.webp 256w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-512.webp 512w, https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-633.webp 633w&quot; sizes=&quot;(max-width: 593px) 100vw, 593px&quot;&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js Twitter poll results&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/poll-results-e006cbcf-64.png&quot; width=&quot;64&quot; height=&quot;45&quot;&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;/a&gt;
&lt;p&gt;It seems quite obvious that people in my network, mostly fellow software engineers, prefer to use version managers such as &lt;code&gt;nvm&lt;/code&gt; or &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The second place (actually very tight with the third one) is the official installer, followed by a system package manager and, last one, installing Node.js from source.&lt;/p&gt;
&lt;h3 id=&quot;lts-and-stable-releases&quot; class=&quot;title is-3&quot;&gt;LTS and stable releases&lt;/h3&gt;
&lt;p&gt;Before moving on and exploring all the different installation options, it is definitely worth spending few words to learn about the types of release the Node.js project maintains.&lt;/p&gt;
&lt;p&gt;Node.js offers 2 main release lines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stable&lt;/strong&gt; (or &lt;em&gt;Current&lt;/em&gt;): every new major Node.js release is considered &amp;quot;Current&amp;quot; for the first 6 months after the publish date. The idea is to give library authors the time to test their compatibility with the new release and do any necessary change. After the 6 months period, all the odd release numbers (9, 11, 13, 15, etc.) move to the state of &lt;em&gt;Unsupported&lt;/em&gt;, while even releases (10, 12, 14, etc.) are promoted to &lt;em&gt;Long Term Support&lt;/em&gt; (or &amp;quot;LTS&amp;quot;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LTS&lt;/strong&gt;: releases marked as &amp;quot;Long Term Support&amp;quot; get critical bug fixes for a total of 30 months since the initial publish date. This makes LTS releases particularly suitable for production deployments. The most recent LTS is also called &lt;em&gt;Active LTS&lt;/em&gt;, while previous LTS versions (still under the 30 months support timeframe) are called &lt;em&gt;Maintenance LTS&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the release coming from the current &lt;em&gt;master&lt;/em&gt; branch is considered &lt;strong&gt;Unstable&lt;/strong&gt;. This is generally a release dedicated to people maintaining Node.js or developers who want to explore new experimental features that haven&#39;t been yet included in any of the major releases.&lt;/p&gt;
&lt;p&gt;Node.js publishes an &lt;a href=&quot;https://nodejs.org/en/about/releases/&quot;&gt;official timeline of current and future releases&lt;/a&gt;. At the time of writing (December 2020), this how the timeline looks like:&lt;/p&gt;
&lt;a href=&quot;https://nodejs.org/en/about/releases/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Node.js release timeline&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/nodejs-release-schedule_9b4bf060.svg&quot; width=&quot;760&quot; height=&quot;396&quot;&gt;&lt;/p&gt;
&lt;/a&gt;
&lt;p&gt;If you are still wondering which release should you use, going with the &lt;em&gt;Active LTS&lt;/em&gt; is almost always the best choice, especially if you are building production applications.&lt;/p&gt;
&lt;h2 id=&quot;install-node.js-using-n&quot; class=&quot;title is-2&quot;&gt;Install Node.js using n&lt;/h2&gt;
&lt;p&gt;Since installing Node.js using a version manager seems to be the favourite option (and it&#39;s also my personal favourite!) let&#39;s start with it.&lt;/p&gt;
&lt;p&gt;My favourite Node.js version manager is &lt;a href=&quot;https://github.com/tj/n&quot;&gt;&lt;code&gt;n&lt;/code&gt; by TJ Holowaychuk&lt;/a&gt;. The reason why I like it is because it is quite simple to install and use and it is generally up to date with the latest releases of Node.js.
The main issue with it is that it does not support Windows, so if Windows is your operative system, this is not an option for you!&lt;/p&gt;
&lt;p&gt;Let&#39;s see how to install &lt;code&gt;n&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;If you are on macOS and you have &lt;code&gt;brew&lt;/code&gt; (Homebrew) installed, the simplest way to install &lt;code&gt;n&lt;/code&gt; is to just do it with &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can use the custom install script:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -L https://git.io/n-install &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are concerned about running a script downloaded from the web (as you should because &lt;a href=&quot;https://www.idontplaydarts.com/2016/04/detecting-curl-pipe-bash-server-side/&quot;&gt;&lt;code&gt;curl | bash&lt;/code&gt; might be dangerous&lt;/a&gt;), you can always download the script first, READ IT, and then run it locally...&lt;/p&gt;
&lt;p&gt;If all goes well, you should now be able to use the &lt;code&gt;n&lt;/code&gt; executable from your shell.&lt;/p&gt;
&lt;p&gt;These are some of the commands you can run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# shows the version of `n` installed in your system&lt;/span&gt;&lt;br&gt;n --version&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# installs the latest LTS release of Node.js&lt;/span&gt;&lt;br&gt;n lts&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# lists all the versions of Node.js currently available&lt;/span&gt;&lt;br&gt;n list&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# install the given version of Node.js and switch to it&lt;/span&gt;&lt;br&gt;n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;some_version&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can simply run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For an interactive prompt that will show you all the available versions, highlight the ones you have already installed and let you pick the version you want to switch to.&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;n Node.js version manager in action&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/n_ac172e26.gif&quot; width=&quot;640&quot; height=&quot;428&quot;&gt;&lt;/p&gt;
&lt;p&gt;In summary, this is where &lt;code&gt;n&lt;/code&gt; shines or falls short:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👎 No official support for Windows&lt;/li&gt;
&lt;li&gt;👍 Very easy to install on macOS and unix systems&lt;/li&gt;
&lt;li&gt;👍 Very easy to keep your Node.js install up to date and switch version on demand&lt;/li&gt;
&lt;li&gt;👍 It keeps all the installed versions cached, so you can switch quickly between versions (no full re-install)&lt;/li&gt;
&lt;li&gt;👍 Allows to keep the setup local to the user so you don&#39;t have to use admin permission to install global packages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-using-nvm&quot; class=&quot;title is-2&quot;&gt;Install Node.js using nvm&lt;/h2&gt;
&lt;p&gt;With more than 45 thousand stars on GitHub, &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;&lt;code&gt;nvm&lt;/code&gt;&lt;/a&gt;, which stands for &amp;quot;Node.js Version Manager&amp;quot; (no surprises!), is probably the most famous Node.js version manager currently available.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvm&lt;/code&gt; works on any POSIX-compliant shell (&lt;code&gt;sh&lt;/code&gt;, &lt;code&gt;dash&lt;/code&gt;, &lt;code&gt;ksh&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, etc.) and it has been strongly tested against the following systems: unix, macOS, and windows WSL (if you are on Windows, you can also check out &lt;a href=&quot;https://github.com/coreybutler/nvm-windows&quot;&gt;&lt;code&gt;nvm-windows&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The easiest way to install &lt;code&gt;nvm&lt;/code&gt; on your system is to use the official installer script:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;v0.37.2&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- &lt;span class=&quot;token string&quot;&gt;&quot;https://raw.githubusercontent.com/nvm-sh/nvm/&lt;span class=&quot;token variable&quot;&gt;${VERSION}&lt;/span&gt;/install.sh&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: At the time of writing, version &lt;code&gt;v0.37.2&lt;/code&gt; is the latest version available. Make sure to check out if there is any new version available if you are installing &lt;code&gt;nvm&lt;/code&gt; following this tutorial.&lt;/p&gt;
&lt;p&gt;Once &lt;code&gt;nvm&lt;/code&gt; is installed in your system, here are some examples showing what you can do with it:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# installs the latest version of Node.js&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; node&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# installs the latest LTS version of Node.js&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --lts&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# installs a specific version of Node.js&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.10.0&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# switch to a specific version of Node.js&lt;/span&gt;&lt;br&gt;nvm use &lt;span class=&quot;token string&quot;&gt;&quot;8.9.1&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# runs a specific script with a given version of Node.js (no switch)&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4.2&quot;&lt;/span&gt; node somescript.js&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# shows the full path where a given version of Node.js was installed&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token function&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;4.2&quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# lists all the versions of Node.js available&lt;/span&gt;&lt;br&gt;nvm &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One great thing about &lt;code&gt;nvm&lt;/code&gt; is that it allows to specify the Node.js version you want to use for a given project.&lt;/p&gt;
&lt;p&gt;For instance, if you are working on a project that requires you to use Node.js &lt;code&gt;10.10&lt;/code&gt; you can do the following (in the root folder of the project):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.10&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; .nvmrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then every time you work on that project, you only need to run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm use&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which should print something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Found &#39;/path/to/project/.nvmrc&#39; with version &amp;lt;10.10&amp;gt;
Now using node v10.10.1 (npm v6.7.3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, you can be sure that you working using the correct Node.js version for your project.&lt;/p&gt;
&lt;p&gt;If you don&#39;t want to do manually, you can enable &lt;a href=&quot;https://github.com/nvm-sh/nvm#deeper-shell-integration&quot;&gt;deeper shell integration&lt;/a&gt; to make this happen automatically when you &lt;code&gt;cd&lt;/code&gt; into a folder that has a &lt;code&gt;.nvmrc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PRO tip&lt;/strong&gt;: You can also do that by using &lt;a href=&quot;https://asdf-vm.com/&quot;&gt;&lt;code&gt;asdf&lt;/code&gt;&lt;/a&gt;, a &lt;em&gt;meta&lt;/em&gt; version manager that offers a unified interface for various programming languages and version managers (including Node.js, of course).&lt;/p&gt;
&lt;p&gt;Finally, here are some pros and cons of &lt;code&gt;nvm&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Most popular version manager for Node.js with a large community of users.&lt;/li&gt;
&lt;li&gt;👍 Very easy to install on POSIX systems.&lt;/li&gt;
&lt;li&gt;👍 It allows for easy (and even automated) switch of Node.js version based on the project you are working on.&lt;/li&gt;
&lt;li&gt;👍 It keeps all the installed versions cached, so you can switch quicly between versions (no full re-install)&lt;/li&gt;
&lt;li&gt;👍 You can run once off commands on a given version of Node.js without having to switch the entire system to that version.&lt;/li&gt;
&lt;li&gt;👎 You might have to take a bit of time to go through the documentation and make sure you install it and use it correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you like to use version managers like &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;nvm&lt;/code&gt;, you can also check out &lt;a href=&quot;https://volta.sh/&quot;&gt;&lt;code&gt;volta.sh&lt;/code&gt;&lt;/a&gt;, another interesting alternative in this space, which defines itself as &lt;em&gt;&amp;quot;The Hassle-Free JavaScript Tool Manager&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;install-node.js-using-the-official-installer&quot; class=&quot;title is-2&quot;&gt;Install Node.js using the official installer&lt;/h2&gt;
&lt;p&gt;The second most common way to install Node.js is through one of the official installers or the pre-compiled binaries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Official installers&lt;/a&gt; are available on the official Node.js website for Windows and macOS and they cover the latest &lt;em&gt;Active LTS&lt;/em&gt; release and the latest &lt;em&gt;Current&lt;/em&gt; release.&lt;/p&gt;
&lt;p&gt;The installer for Windows is an executable &lt;em&gt;.msi&lt;/em&gt; installer, while the one for macOS is a &lt;em&gt;.pkg&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;These installers behave and look like most of the installers you see while installing software on Windows or macOS. You will be presented with clickable UI which will allow you to customise and install Node.js into your system.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 732px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-64.png 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-128.png 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-256.png 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-512.png 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-732.png 732w&quot; sizes=&quot;(max-width: 732px) 100vw, 732px&quot;&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-64.webp 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-128.webp 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-256.webp 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-512.webp 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-732.webp 732w&quot; sizes=&quot;(max-width: 732px) 100vw, 732px&quot;&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js using the official macOS installer&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-installer-screenshot-477753f7-64.png&quot; width=&quot;64&quot; height=&quot;48&quot;&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;This is probably the easiest way to install Node.js as you don&#39;t need to be a POSIX expert or do any kind of manual configuration. The installer will suggest sensible defaults to you and allow you to customise the main parameters (e.g. installation path).&lt;/p&gt;
&lt;p&gt;If you are running a unix system, there is no official graphical installer available, but the &lt;a href=&quot;https://nodejs.org/dist/&quot;&gt;official Node.js download page&lt;/a&gt; offers a set of pre-compiled binaries for most architectures (32-bit, 64-bit, ARMv7 and ARMv8) for Linux, Windows and macOS.&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 700px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-64.png 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-128.png 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-256.png 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-512.png 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-1077.png 1077w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-64.webp 64w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-128.webp 128w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-256.webp 256w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-512.webp 512w, https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-1077.webp 1077w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Install Node.js using the official macOS installer&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-js-macos-precompiled-binary-bd4ce1d0-64.png&quot; width=&quot;64&quot; height=&quot;26&quot;&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;With the binary distribution, it is up to you to copy the necessary files in the right place. A version manager tool such as &lt;code&gt;nvm&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; makes things simple, because it takes care of downloading the correct binary release for the desired version (and for your system), then it places the files in the correct folder as expected by your operative system. If you choose to download the binaries manually, all the wiring is up to you.&lt;/p&gt;
&lt;p&gt;While installing Node.js using the official installers is probably the simplest option, doing it using the binaries is a lot more complicated and definitely more complicated than using a version manager.&lt;/p&gt;
&lt;p&gt;If you still want to go down this path, make sure to check out the &lt;a href=&quot;https://github.com/nodejs/help/wiki/Installation&quot;&gt;official tutorial for installing from Node.js pre-compiled binaries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is definitely worth mentioning that the official installer is not the only option. &lt;a href=&quot;https://nodesource.com/&quot;&gt;NodeSource&lt;/a&gt; maintains alternative installers for Debian, Red Hat, macOS and Windows. If you are interested in this approach checkout &lt;a href=&quot;https://node.dev/node-binary&quot;&gt;NodeSource Node.js Binary distributions page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To summarise, these are the main pros and cons of Node.js installers and binary distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Installers are quite easy to use and they don&#39;t require specific POSIX experience.&lt;/li&gt;
&lt;li&gt;👎 Hard to switch between version or upgrade. If you want to do that, you basically have to download the specific installer for the desired version and run through the full process again.&lt;/li&gt;
&lt;li&gt;👎 Installer often will install Node.js as admin, which means that you can&#39;t install global packages unless you do that as admin.&lt;/li&gt;
&lt;li&gt;👎 Binary packages require you to manually manage all the files and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-using-a-package-manager&quot; class=&quot;title is-2&quot;&gt;Install Node.js using a package manager&lt;/h2&gt;
&lt;p&gt;If you are the kind of person that loves to install and manage all the software in your device using system package managers such as &lt;code&gt;apt&lt;/code&gt; (Debian / Ubuntu), &lt;code&gt;brew&lt;/code&gt; (macOS), or &lt;code&gt;winget&lt;/code&gt; (Windows), installing Node.js through a package manager is definitely an option.&lt;/p&gt;
&lt;p&gt;A word of warning though, the various Node.js packages in every package repository are not officially maintained by the Node.js core team, so your mileage might vary quite a lot. This also means that you might not have fresh releases available straight away in your package manager of choice.&lt;/p&gt;
&lt;p&gt;The Node.js core team has compiled an official documentation page on &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;how to install Node.js using the most common system package managers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s see here a summary for the most common options:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Homebrew (macOS)&lt;/span&gt;&lt;br&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; node&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Arch Linux&lt;/span&gt;&lt;br&gt;pacman -S nodejs &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# CentOS, Fedora and Red Hat Enterprise Linux&lt;/span&gt;&lt;br&gt;dnf module list nodejs&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Debian and Ubuntu based Linux distributions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y nodejs&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# FreeBSD&lt;/span&gt;&lt;br&gt;pkg &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; node&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Gentoo&lt;/span&gt;&lt;br&gt;emerge nodejs&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Winget (Windows)&lt;/span&gt;&lt;br&gt;winget &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -e --id OpenJS.Nodejs&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Chocolatey (Windows)&lt;/span&gt;&lt;br&gt;cinst nodejs.install&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;# Scoop (Windows)&lt;/span&gt;&lt;br&gt;scoop &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; nodejs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In short, this is &amp;quot;the good&amp;quot; and &amp;quot;the bad&amp;quot; of following this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 Familiar approach if you install software often using your system package manager.&lt;/li&gt;
&lt;li&gt;👎 Latest Node.js versions might not be immediately available in your package manager of choice. Some versions might not be available at all.&lt;/li&gt;
&lt;li&gt;👎 In most cases, Node.js is installed as super user, which makes it harder to install global packages with &lt;code&gt;npm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;install-node.js-from-source&quot; class=&quot;title is-2&quot;&gt;Install Node.js from source&lt;/h2&gt;
&lt;p&gt;If you are brave enough to be willing to build and install Node.js from source, your first stop should be the &lt;a href=&quot;https://github.com/nodejs/node/blob/master/BUILDING.md&quot;&gt;official documentation on how to build Node.js from source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a brief summary of all the steps involved:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the necessary build dependencies (C++ compiler and build toolchains) for your target system.&lt;/li&gt;
&lt;li&gt;Install Python (used by the build process).&lt;/li&gt;
&lt;li&gt;Download the source code from the &lt;a href=&quot;https://github.com/nodejs/node&quot;&gt;official repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Launch &lt;code&gt;./configure&lt;/code&gt; and then &lt;code&gt;make&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Test your compiled version with &lt;code&gt;make test&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Install it with &lt;code&gt;make install&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If all went well, you should have the &lt;code&gt;node&lt;/code&gt; binary available on your system and be able to run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node --version&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, here is the usual summary of pros and cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;👍 You can install any version of Node.js, including master or even work in progress from a dev branch or a PR. You can even play around with custom changes and get to the point where you might decide to contribute back to Node.js.&lt;/li&gt;
&lt;li&gt;👍 You have full control on how to compile and install Node.js and don&#39;t have to follow pre-defined structures.&lt;/li&gt;
&lt;li&gt;👎 You might need to install a bunch of additional build requirements (compilers, build tools, etc.) before you can even start with the process.&lt;/li&gt;
&lt;li&gt;👎 Definitely the most complicated and the slowest way to get Node.js in your machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;node.js-with-docker&quot; class=&quot;title is-2&quot;&gt;Node.js with Docker&lt;/h2&gt;
&lt;p&gt;If you just want to &amp;quot;play&amp;quot; a bit with a Node.js REPL, you don&#39;t need to install Node.js in your system. If you have &lt;code&gt;docker&lt;/code&gt; installed in your system, running a Node.js REPL in a container is as easy as running:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it node&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a super quick demo:&lt;/p&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Running a Node.js REPL using Docker&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/node-repl-with-docker_edc66675.gif&quot; width=&quot;750&quot; height=&quot;482&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to run a shell in a container with Node.js and &lt;code&gt;npm&lt;/code&gt; installed, then you can do the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run -it node &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way you can install third-party modules using &lt;code&gt;npm&lt;/code&gt;, create your own scripts and run them with &lt;code&gt;node&lt;/code&gt;. When you close the session the container and all the generated files will be destroyed.&lt;/p&gt;
&lt;p&gt;This is the perfect environment for quick and dirty experiments.&lt;/p&gt;
&lt;p&gt;Note, that you can also use Docker as a complete environment for development and not just for quick tests. Docker is actually great for keeping different Node.js version and other dependencies isolated on a per-project basis. Exploring this setup goes beyond the scope of this article, but there is ton of reference on the web about how you might use Docker for Node.js development.&lt;/p&gt;
&lt;h2 id=&quot;node.js-online&quot; class=&quot;title is-2&quot;&gt;Node.js online&lt;/h2&gt;
&lt;p&gt;But what if you don&#39;t have docker installed and still want to have an environment where you can write and run some Node.js code?&lt;/p&gt;
&lt;p&gt;Well, there is no shortage of platforms online that will give you a Node.js environment and an IDE that you can use to write and run JavaScript online.&lt;/p&gt;
&lt;p&gt;These environments often offer delightful additional features like collaborative edit and the possibility to host and share your applications.&lt;/p&gt;
&lt;p&gt;Here&#39;s a non-exhaustive list of services that you might want to try if you just need a quick way to write and share some Node.js examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://codesandbox.io/&quot;&gt;CodeSandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://repl.it/&quot;&gt;Repl.it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://glitch.com/&quot;&gt;Glitch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackblitz.com/&quot;&gt;Stackblitz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these services offer a quite generous free plan, so you only need to sign up to start coding!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; class=&quot;title is-2&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This concludes our list of ways to install Node.js. At this point, I hope you feel comfortable enough picking one of the options suggested here and that along the way you learned a trick or two.&lt;/p&gt;
&lt;p&gt;If you enjoyed this article please consider sharing it and don&#39;t hesitate to reach out to me &lt;a href=&quot;https://twitter.com/loige&quot;&gt;on Twitter&lt;/a&gt;. I am quite curious to find out what is your favourite way to install Node.js and why!&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;
&lt;h3 id=&quot;credits&quot; class=&quot;title is-3&quot;&gt;Credits&lt;/h3&gt;
&lt;p&gt;This article was possible only thanks to the great support and feedback of some amazing engineers. Here are some of the names that helped me (and sorry if I am forgetting someone): &lt;a href=&quot;https://twitter.com/_Don_Quijote_&quot;&gt;@_Don_Quijote_&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/giuseppemorelli&quot;&gt;@GiuseppeMorelli&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/oliverturner&quot;&gt;@oliverturner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/aetheon&quot;&gt;@aetheon&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/dottorblaster&quot;&gt;@dottorblaster&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bcomnes&quot;&gt;@bcomnes&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/wa7son&quot;&gt;@wa7son&lt;/a&gt;.&lt;/p&gt;
</content>
    </entry>
    
    <entry>
      <title>Node.js race conditions</title>
      <link href="https://www.nodejsdesignpatterns.com/blog/node-js-race-conditions/"/>
      <updated>2021-01-24T18:35:00+00:00</updated>
      <id>https://www.nodejsdesignpatterns.com/blog/node-js-race-conditions/</id>
      <content type="html">&lt;p&gt;A single-threaded event loop like the one used by JavaScript and Node.js, makes it somewhat harder to have race conditions, but, SPOILER ALERT: race conditions are still possible!&lt;/p&gt;
&lt;p&gt;In this article, we will explore the topic of race conditions in Node.js. We will discuss some examples and present a few different solutions that can help us to make our code &lt;em&gt;race condition free&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;what-is-a-race-condition%3F&quot; class=&quot;title is-2&quot;&gt;What is a race condition?&lt;/h2&gt;
&lt;p&gt;First of all, let&#39;s try to clarify what a &lt;em&gt;race condition&lt;/em&gt; actually is.&lt;/p&gt;
&lt;p&gt;A race condition is a type of &lt;em&gt;programming error&lt;/em&gt; that can occur when multiple processes or threads are accessing the same shared resource, for instance, a file on a file system or a record in a database, and at least one of them is trying to modify the resource.&lt;/p&gt;
&lt;p&gt;Let&#39;s try to present an example. Imagine that while a thread is trying to rename a file, another thread is trying to delete the same file. In this case, the second thread will receive an error because, when it&#39;s trying to delete the file, the file has already been renamed. Or, the other way around, while one thread is trying to rename the file, the file was already deleted by the other thread and it&#39;s not available on the filesystem anymore.&lt;/p&gt;
&lt;p&gt;In other cases, race conditions can be more subtle, because they wouldn&#39;t result in the program crashing, but they might just be the source of an incorrect or inconsistent behaviour. In these cases, since there is no explicit error and no stack trace, the issue is generally much harder to troubleshoot and fix.&lt;/p&gt;
&lt;p&gt;A classic example is when 2 threads are trying to update the same data source and the new information is the result of a function applied to the current value.&lt;/p&gt;
&lt;p&gt;Let&#39;s pretend we are building a Roman Empire simulation game in which we can manage some cash flow and we have a global balance in &lt;a href=&quot;https://en.wiktionary.org/wiki/aureus&quot;&gt;&lt;em&gt;aureus&lt;/em&gt;&lt;/a&gt; (a currency used in the Roman Empire around 100 B.C.E.). Now, let&#39;s say that our initial balance is &lt;code&gt;0&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; and that there are two independent game components (possibly running on separate threads) that are trying to increase the balance by &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; each, we should expect that in the end, the balance is &lt;code&gt;100&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt;, right?&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0 + 50 + 50 = 100 🤑&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we implement this in a naive way, we might have the two components performing three distinct operations each:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read the current value for &lt;code&gt;balance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; to it&lt;/li&gt;
&lt;li&gt;Save the resulting value into &lt;code&gt;balance&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since the two components are running in parallel, without any synchronisation mechanism, the following case could happen:&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 848px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-64.png 64w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-128.png 128w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-256.png 256w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-512.png 512w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-2002.png 2002w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot;&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-64.webp 64w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-128.webp 128w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-256.webp 256w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-512.webp 512w, https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-2002.webp 2002w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot;&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;A race condition example showing 2 processes trying to update a balance&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/aurei-race-condition-node-js-8e3027ab-64.png&quot; width=&quot;64&quot; height=&quot;30&quot;&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;In the picture above you can see that &lt;strong&gt;Component 2&lt;/strong&gt; ends up having a &lt;em&gt;stale&lt;/em&gt; view of the balance: the balance gets changed by &lt;strong&gt;Component 1&lt;/strong&gt; after &lt;strong&gt;Component 2&lt;/strong&gt; has read the balance. For this reason, when &lt;strong&gt;Component 2&lt;/strong&gt; performs its own update, it is effectively overriding any change previously made by &lt;strong&gt;Component 1&lt;/strong&gt;. This is why we have a race condition: the two components are effectively racing to complete their own tasks and they might end up stepping onto each other&#39;s toes! This doesn&#39;t make &lt;em&gt;Julius&lt;/em&gt; happy I am afraid...&lt;/p&gt;
&lt;p&gt;One way to solve this problem is to isolate the 2 concurrent operations into &lt;em&gt;transactions&lt;/em&gt; and make sure that there is only one transaction running at a given time. This idea might look like this:&lt;/p&gt;
&lt;span style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 848px; &quot;&gt;
&lt;picture&gt;
  &lt;source type=&quot;image/png&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-64.png 64w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-128.png 128w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-256.png 256w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-512.png 512w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-2022.png 2022w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot;&gt;
&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-64.webp 64w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-128.webp 128w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-256.webp 256w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-512.webp 512w, https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-2022.webp 2022w&quot; sizes=&quot;(max-width: 848px) 100vw, 848px&quot;&gt;
&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; style=&quot;max-width: 100%; width: 100%; margin: 0px; vertical-align: middle;&quot; alt=&quot;Fixing a race condition using a transaction&quot; src=&quot;https://www.nodejsdesignpatterns.com/img/aurei-fixed-race-condition-node-js-a2696610-64.png&quot; width=&quot;64&quot; height=&quot;31&quot;&gt;
&lt;/picture&gt;
&lt;/span&gt;
&lt;p&gt;In the last picture, we are using transactions to make sure that all the steps of &lt;strong&gt;Component 1&lt;/strong&gt; happen in order before all the steps of &lt;strong&gt;Component 2&lt;/strong&gt;. This prevents any &lt;em&gt;stale read&lt;/em&gt; and makes sure that every component always has an up to date view of the world before doing any change. You can stop holding your breath now, Julius!&lt;/p&gt;
&lt;p&gt;In the rest of this article, we will zoom in more on race conditions in the context of Node.js and we will see some other approaches to deal with them.&lt;/p&gt;
&lt;h2 id=&quot;can-we-have-race-conditions-in-node.js%3F&quot; class=&quot;title is-2&quot;&gt;Can we have race conditions in Node.js?&lt;/h2&gt;
&lt;p&gt;It is a common misconception to think that Node.js does not have race conditions because of its single-threaded nature. While it is true that in Node.js you would not have multiple threads competing for resources, you might still end up with tasks belonging to different logical transactions being executed in an order that might result in &lt;em&gt;stale reads&lt;/em&gt; and generate a race condition.&lt;/p&gt;
&lt;p&gt;In the example that we illustrated above, we intentionally represented the various tasks (&lt;em&gt;read&lt;/em&gt;, &lt;em&gt;increase&lt;/em&gt; and &lt;em&gt;save&lt;/em&gt;) as discrete units. Note how the system is never executing more than one task at the same time. This is a simple but accurate representation of how the Node.js event loop processes tasks on a single thread. Nonetheless, you can see that there might be situations where multiple logical transactions (e.g. multiple deposits) are scheduled concurrently on the event loop and the discrete tasks might end up being intermingled, which results in a race condition.&lt;/p&gt;
&lt;p&gt;So... &lt;strong&gt;Yes&lt;/strong&gt;, we can have race conditions in Node.js!&lt;/p&gt;
&lt;h2 id=&quot;a-node.js-example-with-a-race-condition&quot; class=&quot;title is-2&quot;&gt;A Node.js example with a race condition&lt;/h2&gt;
&lt;p&gt;Now, let&#39;s talk some code! Let&#39;s try to re-create the Roman Empire simulation game example that we discussed above.&lt;/p&gt;
&lt;p&gt;In ancient Rome, Romans used to export olives and grapes. No wonder Italy is still famous worldwide for olive oil and wine! In our game, we want to be able to harvest olives and grapes and then sell them as a means to acquire more &lt;em&gt;aurei&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We are going to have two functions that can increase the balance by &lt;code&gt;50&lt;/code&gt; &lt;em&gt;aurei&lt;/em&gt; which we are going to call &lt;code&gt;sellOlives()&lt;/code&gt; and &lt;code&gt;sellGrapes()&lt;/code&gt;. We will also assume that every time the balance is changed, it is persisted to a data storage of sort (e.g. a database). For the sake of this example, we won&#39;t be using a real data storage, but we will just simulate some random asynchronous delay before reading or modifying a global value. This will be enough to illustrate how we can end up with a race condition.&lt;/p&gt;
&lt;p&gt;For starts, let&#39;s see what a buggy implementation might look like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Utility function to simulate some delay (e.g. reading from or writing to a database).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// It will take from 0 to 50ms in a random fashion.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Our global balance.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// In a more complete implementation, this will live in the persistent data storage.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// simulates random delay to retrieve data from data storage&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;randomDelay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; balance&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// simulates random delay to write the data to the data storage&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;randomDelay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transaction1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NOTE: no `await`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; transaction2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// NOTE: no `await`&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transaction1 &lt;span class=&quot;token comment&quot;&gt;// NOTE: awaiting here does not stop `transaction2` &lt;/span&gt;&lt;br&gt;                     &lt;span class=&quot;token comment&quot;&gt;// from being scheduled before transaction 1 is completed&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; transaction2&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we execute this code we might end up with different results. In one case we might get the correct outcome:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellOlives - balance loaded: 0&lt;br&gt;sellOlives - balance updated: 50&lt;br&gt;sellGrapes - balance loaded: 50&lt;br&gt;sellGrapes - balance updated: 100&lt;br&gt;Final balance: 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in other cases we might end up in a bad state:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0&lt;br&gt;sellOlives - balance loaded: 0&lt;br&gt;sellGrapes - balance updated: 50&lt;br&gt;sellOlives - balance updated: 50&lt;br&gt;Final balance: 50&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how in this last case, &lt;code&gt;sellOlives&lt;/code&gt; is essentially a stale read and therefore it will end up overriding the balance disregarding any work already done by &lt;code&gt;sellGrapes&lt;/code&gt;. Yes, we do have a race condition, unfortunately!&lt;/p&gt;
&lt;p&gt;Now, this example is simple ad it is not too hard to pinpoint exactly where the race condition has originated by just looking at the code.&lt;/p&gt;
&lt;p&gt;Take a minute or two to read the code again. Check out the output from the 2 cases as well. Pay attention to the notes and the log messages and try to imagine how the Node.js runtime might execute this code in the 2 different scenarios.&lt;/p&gt;
&lt;p&gt;Ok, now that you have done that, let&#39;s discuss together what happens.&lt;/p&gt;
&lt;p&gt;In our &lt;code&gt;main&lt;/code&gt; function, when we execute &lt;code&gt;sellGrapes()&lt;/code&gt; and &lt;code&gt;sellOlives()&lt;/code&gt;, since we are not awaiting the two operations independently, we are essentially scheduling both operations onto the event loop.&lt;/p&gt;
&lt;p&gt;We only await the two transactions after they have been already scheduled, which means that they will work concurrently. After the two transactions have been scheduled, we wait for &lt;code&gt;transaction1&lt;/code&gt; to complete and only then we wait for &lt;code&gt;transaction2&lt;/code&gt; to complete. Note that &lt;code&gt;transaction2&lt;/code&gt; might complete even before &lt;code&gt;transaction1&lt;/code&gt;. In other words, awaiting for &lt;code&gt;transaction1&lt;/code&gt; doesn&#39;t block &lt;code&gt;transaction2&lt;/code&gt; in any way.&lt;/p&gt;
&lt;p&gt;This approach is similar to writing the following code:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;Promise.all()&lt;/code&gt; is a more commonly used way to schedule different tasks to run concurrently.&lt;/p&gt;
&lt;p&gt;Note that with &lt;code&gt;Promise.all()&lt;/code&gt;, the resulting promise will reject as soon as any of the promises rejects. In our previous example, since we await the two promises independently, we will always catch errors in &lt;code&gt;transaction1&lt;/code&gt; before &lt;code&gt;transaction2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But let&#39;s not digress too much into this. Now that we understand the problem, how do we fix the race condition?&lt;/p&gt;
&lt;p&gt;Well, it turns out that in this simple case, we might make things right quite easily:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- schedule the first transaction and wait for completion&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;- when it&#39;s completed, we start the second transaction &lt;/span&gt;&lt;br&gt;                     &lt;span class=&quot;token comment&quot;&gt;//    and wait for completion&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This implementation will consistently produce the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0&lt;br&gt;sellGrapes - balance updated: 50&lt;br&gt;sellOlives - balance loaded: 50&lt;br&gt;sellOlives - balance updated: 100&lt;br&gt;Final balance: 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can observe, &lt;code&gt;sellGrapes&lt;/code&gt; is always started and completed &lt;em&gt;before&lt;/em&gt; we start &lt;code&gt;sellOlives&lt;/code&gt;. This makes the two logical transactions isolated and makes sure their tasks won&#39;t end up being mixed together in random order.&lt;/p&gt;
&lt;p&gt;Problem solved... &lt;em&gt;vade in pacem&lt;/em&gt; dear race condition!&lt;/p&gt;
&lt;h2 id=&quot;using-a-mutex-in-node.js&quot; class=&quot;title is-2&quot;&gt;Using a mutex in Node.js&lt;/h2&gt;
&lt;p&gt;OK, the previous example was illustrative, but if we are building a real game, chances are things will end up being a lot more complicated. We will probably end up having many different actions that might cause a change of balance. Those actions might be the result of a particular sequence of events and it might become hard to track down the discrete logical transactions that we have to &lt;em&gt;serialize&lt;/em&gt; in order to avoid race conditions.&lt;/p&gt;
&lt;p&gt;Ideally, we don&#39;t want to think in terms of transactions, we just need to make sure that we never read the balance if there is another concurrent operation that is ready to change its value.&lt;/p&gt;
&lt;p&gt;To be able to do this we need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have a way to identify when &lt;em&gt;we are about to change&lt;/em&gt; the balance&lt;/li&gt;
&lt;li&gt;Let other events wait in line until the change is completed before reading the balance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We could say that when &lt;em&gt;we are about to change&lt;/em&gt; the balance we enter a &lt;em&gt;critical path&lt;/em&gt; and that we don&#39;t want to intermingle events from different logical transactions in a critical path.&lt;/p&gt;
&lt;p&gt;One way to achieve this is by using a &lt;em&gt;Mutex&lt;/em&gt; (which stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/Mutual_exclusion&quot;&gt;&lt;strong&gt;mut&lt;/strong&gt;ual &lt;strong&gt;ex&lt;/strong&gt;clusion&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;A mutex is a mechanism that allows synchronising access to a shared resource.&lt;/p&gt;
&lt;p&gt;We can see a mutex as a shared object that allows us to mark when the code execution is entering and exiting from a critical path. In addition to that, a mutex can help us to queue other logical transactions that want to access the same critical path while one transaction is being processed.&lt;/p&gt;
&lt;p&gt;Before talking code, be aware that using a mutex might have a performance impact in your application and that this solution won&#39;t work if you use a distributed or a multi-process setup. More details on this later.&lt;/p&gt;
&lt;h2 id=&quot;using-async-mutex&quot; class=&quot;title is-2&quot;&gt;Using &lt;code&gt;async-mutex&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A very useful library that we can useg is &lt;a href=&quot;https://npm.im/async-mutex&quot;&gt;&lt;code&gt;async-mutex&lt;/code&gt;&lt;/a&gt;. This library provides a promise-based implementation of the mutex pattern.&lt;/p&gt;
&lt;p&gt;You can install this library from &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save async-mutex&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, here&#39;s an example of how we could use this library to mark the beginning and the end of a critical path:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Mutex &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;async-mutex&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// creates a shared mutex instance&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doingSomethingCritical&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// acquires access to the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// ... do stuff on the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// completes the work on the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we are using a global mutex instance to mark the beginning and the end of a critical path which happens inside our &lt;code&gt;doingSomethingCritical()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;mutex.acquire()&lt;/code&gt;, this method will return a promise. If no other concurrent operation is currently on the same critical path, the promise resolves to a function that we call &lt;code&gt;release&lt;/code&gt;. In this situation, we are essentially granted exclusive access to the critical path. If some concurrent operation is on the critical path already, the promise won&#39;t resolve until the concurrent operation already on the critical path has completed. This is how concurrent operations &lt;em&gt;wait in line&lt;/em&gt; for our exclusive access to the critical path.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;release&lt;/code&gt; function must be invoked to mark the completion of the work on the critical path. It effectively &lt;em&gt;releases&lt;/em&gt; the exclusive access to the critical path and makes it available to the next task in line. Note that we are using a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; block here to make sure that &lt;code&gt;release&lt;/code&gt; is called even in case of an exception. It is very important to do so. In fact, failing to call &lt;code&gt;release&lt;/code&gt;, will leave all the other events waiting in line forever!&lt;/p&gt;
&lt;p&gt;Now let&#39;s try to use &lt;code&gt;async-mutex&lt;/code&gt; to avoid race conditions in our game:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Mutex &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;async-mutex&#39;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// global mutex instance&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// this code will need exclusive access to the balance&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// so we consider this to be a critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// get access to the critical path (or wait in line)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// completes work on the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// similar to `sellGrapes` this is a critical path because&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// it needs exclusive access to balance&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; release &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// Here we can call many events safely, the mutex will guarantee that the&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token comment&quot;&gt;// competing events are executed in the right order!&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above will consistently produce the following output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;sellGrapes - balance loaded: 0&lt;br&gt;sellGrapes - balance updated: 50&lt;br&gt;sellOlives - balance loaded: 50&lt;br&gt;sellOlives - balance updated: 100&lt;br&gt;sellGrapes - balance loaded: 100&lt;br&gt;sellGrapes - balance updated: 150&lt;br&gt;sellOlives - balance loaded: 150&lt;br&gt;sellOlives - balance updated: 200&lt;br&gt;sellGrapes - balance loaded: 200&lt;br&gt;sellGrapes - balance updated: 250&lt;br&gt;sellOlives - balance loaded: 250&lt;br&gt;sellOlives - balance updated: 300&lt;br&gt;Final balance: 300&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the code has been truncated for simplicity. You can find all the examples in &lt;a href=&quot;https://github.com/lmammino/node-js-race-conditions&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From the example above, you can see how mutexes can provide a convenient way of thinking about exclusive access and how they can help to avoid race conditions. We are intentionally triggering multiple calls to &lt;code&gt;sellGrapes()&lt;/code&gt; and &lt;code&gt;sellOlives()&lt;/code&gt; concurrently, to make obvious that we don&#39;t have to think about potential race conditions at the &lt;em&gt;calling point&lt;/em&gt;. This means that, as our game grows more complicated, we can keep invoking these functions without having to worry about generating new race conditions.&lt;/p&gt;
&lt;h2 id=&quot;let&#39;s-implement-a-mutex&quot; class=&quot;title is-2&quot;&gt;Let&#39;s implement a mutex&lt;/h2&gt;
&lt;p&gt;But what if we are dealing with a race condition only in one place in our entire application? Is it worth to include and manage an external dependecy just because of that? Can we come up with a simpler alternative that does not require us to install a new dependency?&lt;/p&gt;
&lt;p&gt;It turns out that we can easily do that! Let&#39;s see how we can implement our own mutex.&lt;/p&gt;
&lt;p&gt;Note that the solution we are going to present here is effectively a variation of the &lt;strong&gt;sequential execution pattern&lt;/strong&gt; using promises that is presented in &lt;em&gt;Chapter 5&lt;/em&gt; of &lt;a href=&quot;https://www.nodejsdesignpatterns.com/&quot;&gt;Node.js Design Patterns&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea is to inizialize our global mutex as an instance of a resolved promise:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in our critical path we can do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doingSomethingCritical&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// ... do stuff on the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token comment&quot;&gt;// ... manage errors on the critical path&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea is that every time we are invoking the function &lt;code&gt;doingSomethingCritical()&lt;/code&gt; we are effectively &amp;quot;queueing&amp;quot; the execution of the code on the critical path using &lt;code&gt;mutex.then()&lt;/code&gt;. If this is the first call, our initial instance of the &lt;code&gt;mutex&lt;/code&gt; promise is a resolved promise, so the code on the critical path will be executed straight away on the next cycle of the event loop.&lt;/p&gt;
&lt;p&gt;Calling &lt;code&gt;.then()&lt;/code&gt; on a promise returns a new promise instance that is used to replace the original &lt;code&gt;mutex&lt;/code&gt; instance and it&#39;s also returned by the &lt;code&gt;doingSomethingCritical()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This allows us to have concurrent calls to &lt;code&gt;doingSomethingCritical()&lt;/code&gt; being queued to be executed sequentially.&lt;/p&gt;
&lt;p&gt;Note that we also specify a &lt;code&gt;mutex.catch()&lt;/code&gt;. This allows us to catch and react to specific errors, but it also allows us not to break the chain of sequential execution in case an operation fails.&lt;/p&gt;
&lt;p&gt;Ok, now that we have explored this idea, let&#39;s apply it to our example.&lt;/p&gt;
&lt;p&gt;This is how our code is going to look like:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomDelay&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// global mutex instance&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellGrapes - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  mutex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance loaded: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newBalance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newBalance&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;sellOlives - balance updated: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;newBalance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; mutex&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellGrapes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;sellOlives&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; balance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;loadBalance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Final balance: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;balance&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you try to run this code, you will see that it consistently prints the same output as per our previous implementation using &lt;code&gt;async-mutex&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;So, here we have it, a simple mutex implementation in just few lines of code leveraging promise chainability!&lt;/p&gt;
&lt;h2 id=&quot;mutex-with-multiple-processes&quot; class=&quot;title is-2&quot;&gt;Mutex with multiple processes&lt;/h2&gt;
&lt;p&gt;It is important to mention that the solutions presented in this article only work in a Node.js application running on a single process.&lt;/p&gt;
&lt;p&gt;If you are running your application on multiple processes (for instance, by using the &lt;a href=&quot;https://nodejs.org/api/cluster.html&quot;&gt;&lt;code&gt;cluster&lt;/code&gt; module&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/api/worker_threads.html&quot;&gt;worker threads&lt;/a&gt; or a multi-process runner like &lt;a href=&quot;https://pm2.keymetrics.io/&quot;&gt;&lt;code&gt;pm2&lt;/code&gt;&lt;/a&gt;) using a mutex within our code is not going to solve race conditions across processes. This is also the case if you are running your application on multiple servers.&lt;/p&gt;
&lt;p&gt;In these cases you have to rely on more complicated solutions like &lt;a href=&quot;https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html&quot;&gt;distributed locks&lt;/a&gt; or, if you are using a central database, you can rely on solutions provided by your own database systems. We will discuss a simple example in the next section.&lt;/p&gt;
&lt;h2 id=&quot;mutex-performance&quot; class=&quot;title is-2&quot;&gt;Mutex performance&lt;/h2&gt;
&lt;p&gt;We already mentioned that using a mutex might have a relevant performance impact in your application.&lt;/p&gt;
&lt;p&gt;To try to visualize why a mutex has a performance impact in your application let&#39;s try to think about the case when an operation is trying to acquire a lock on a mutex but the mutex is already locked. In this case, our operation is simply waiting without doing nothing, while for instance it could be doing some IO operation like connecting to the database or sending a query. It will probably take the event loop several spins before the lock is released and the operation that is waiting in line can acquire the lock. This get worse with a high number of operations waiting in line.&lt;/p&gt;
&lt;p&gt;With a mutex we are effectively serializing tasks, making sure that executed in sequence and non-concurrently. If you abuse this pattern, you might end up in a situation where you could effectively eliminate all concurrency from your application.&lt;/p&gt;
&lt;p&gt;Measuring how a mutex might impact your specific application is not something that can be done holistically and we recommend you to run your own benchmarks to find out what is the effect of introducing one or more mutex instances in your application.&lt;/p&gt;
&lt;p&gt;Our general recommendation is to use a mutex only when you are sure you have to protect your code from a race condition and to try to make the critical path as short as possible.&lt;/p&gt;
&lt;p&gt;Be aware that a mutex is not the only solution to race conditions. For instance, in our example, if we were to use a real relational database as a data storage, we could have avoided any race condition (at the application level) by letting the database itself do the increment using a SQL query:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; game &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; aurei &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; aurei &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this approach, we are trusting the database to do the right thing and we are not slowing down our application.&lt;/p&gt;
&lt;p&gt;And there are other alternative approches. Just to name one, &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimistic_concurrency_control&quot;&gt;optimistic locks&lt;/a&gt; might provide a great alternative if race conditions are possible but they actually happen only in rare occasions.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; class=&quot;title is-2&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this article, we have explored race conditions and learned why they can be harmful. We showed how race conditions can happen in Node.js and several techniques to address them including the adoptopm of a mutex.&lt;/p&gt;
&lt;p&gt;This is an interesting topic which often gets explored in the context of multi-threaded languages. The theory isn&#39;t much different but there are some important differences when dealing with concurrent, single-threaded languages like Node.js.&lt;/p&gt;
&lt;p&gt;If you are curious to understand better the difference between &lt;strong&gt;Parallelism&lt;/strong&gt; and &lt;strong&gt;Concurrency&lt;/strong&gt; I strongly recommend you to read this great essay titled &lt;a href=&quot;http://yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html&quot;&gt;parallelism and concurrency need different tools&lt;/a&gt;. You can also watch this wonderful talk by &lt;a href=&quot;https://twitter.com/steveklabnik&quot;&gt;Steve Klabnik&lt;/a&gt; called &lt;a href=&quot;https://www.youtube.com/watch?v=lJ3NC-R3gSI&quot;&gt;Rust&#39;s Journey to Async/Await&lt;/a&gt; (yes, it&#39;s not only about Rust, trust me).&lt;/p&gt;
&lt;p&gt;I really hope you enjoyed this article. Make sure to &lt;a href=&quot;https://twitter.com/loige&quot;&gt;reach out to me on Twitter&lt;/a&gt; and let me know what you think!&lt;/p&gt;
&lt;p&gt;Bye 😋&lt;/p&gt;
&lt;h2 id=&quot;credits&quot; class=&quot;title is-2&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/Jack-Barry&quot;&gt;Jack Barry&lt;/a&gt; for the inspiration for this post on the &lt;a href=&quot;https://github.com/PacktPublishing/Node.js-Design-Patterns-Third-Edition/discussions/25&quot;&gt;Node.js Design Patterns discussion board&lt;/a&gt;. Thanks to &lt;a href=&quot;https://twitter.com/quasi_modal&quot;&gt;Peter Caulfield&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/StefanoAbalsamo&quot;&gt;Stefano Abalsamo&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/gbinside&quot;&gt;Roberto Gambuzzi&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mariocasciaro&quot;&gt;Mario Casciaro&lt;/a&gt; for kindly reviewing this post.&lt;/p&gt;
</content>
    </entry>
</feed>